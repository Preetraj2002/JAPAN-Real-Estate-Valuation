2023-08-08 20:29:31,852:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:29:31,852:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:29:31,852:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:29:31,852:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:29:35,750:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 20:31:56,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:31:56,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:31:56,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:31:56,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:31:57,229:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 20:32:26,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:26,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:26,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:26,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:26,737:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 20:32:43,089:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:43,089:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:43,089:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:43,089:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:32:43,684:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 20:33:03,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:03,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:03,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:03,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:03,648:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 20:33:15,146:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:15,146:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:15,146:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:15,146:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 20:33:15,741:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-08 21:46:52,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 21:46:52,976:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 21:46:52,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 21:46:52,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:10:49,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:10:49,277:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:10:49,277:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:10:49,277:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:11:50,144:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:11:50,144:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:11:50,144:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:11:50,144:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:12:44,429:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:12:44,429:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:12:44,429:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:12:44,429:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:13:21,760:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:13:21,760:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:13:21,760:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:13:21,760:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:16:32,014:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:16:32,014:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:16:32,014:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:16:32,014:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:34:25,462:INFO:Initializing load_model()
2023-08-08 22:34:25,462:INFO:load_model(model_name=stc0_model_07, platform=None, authentication=None, verbose=True)
2023-08-08 22:34:42,116:INFO:Initializing load_model()
2023-08-08 22:34:42,116:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-08 22:34:42,199:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-08 22:34:42,216:INFO:Initializing predict_model()
2023-08-08 22:34:42,216:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FA566B8E0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FA5814A60>)
2023-08-08 22:34:42,216:INFO:Checking exceptions
2023-08-08 22:34:42,216:INFO:Preloading libraries
2023-08-08 22:34:42,217:INFO:Set up data.
2023-08-08 22:35:13,432:INFO:Initializing predict_model()
2023-08-08 22:35:13,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FA561E3A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FA5CF3940>)
2023-08-08 22:35:13,432:INFO:Checking exceptions
2023-08-08 22:35:13,432:INFO:Preloading libraries
2023-08-08 22:35:13,432:INFO:Set up data.
2023-08-08 22:35:13,437:INFO:Set up index.
2023-08-08 22:35:47,146:INFO:Initializing predict_model()
2023-08-08 22:35:47,147:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FA565B2B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FA5D66EE0>)
2023-08-08 22:35:47,147:INFO:Checking exceptions
2023-08-08 22:35:47,148:INFO:Preloading libraries
2023-08-08 22:35:47,148:INFO:Set up data.
2023-08-08 22:35:47,152:INFO:Set up index.
2023-08-08 22:35:49,290:INFO:Initializing predict_model()
2023-08-08 22:35:49,290:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FA566B130>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FA53BF9D0>)
2023-08-08 22:35:49,291:INFO:Checking exceptions
2023-08-08 22:35:49,291:INFO:Preloading libraries
2023-08-08 22:35:49,292:INFO:Set up data.
2023-08-08 22:35:49,296:INFO:Set up index.
2023-08-08 22:37:20,093:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:37:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:37:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:37:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-08 22:40:42,951:INFO:Initializing load_model()
2023-08-08 22:40:42,951:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-08 22:40:42,989:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-08 22:42:54,002:INFO:Initializing predict_model()
2023-08-08 22:42:54,002:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF1178B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EF2DE1F0>)
2023-08-08 22:42:54,002:INFO:Checking exceptions
2023-08-08 22:42:54,002:INFO:Preloading libraries
2023-08-08 22:42:54,002:INFO:Set up data.
2023-08-08 22:42:54,009:INFO:Set up index.
2023-08-08 22:44:12,502:INFO:Initializing predict_model()
2023-08-08 22:44:12,503:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF4C1070>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EF2DE310>)
2023-08-08 22:44:12,504:INFO:Checking exceptions
2023-08-08 22:44:12,504:INFO:Preloading libraries
2023-08-08 22:46:28,015:INFO:Initializing predict_model()
2023-08-08 22:46:28,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF4C13D0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EF5B9700>)
2023-08-08 22:46:28,016:INFO:Checking exceptions
2023-08-08 22:46:28,016:INFO:Preloading libraries
2023-08-08 22:46:28,017:INFO:Set up data.
2023-08-08 22:46:28,021:INFO:Set up index.
2023-08-08 22:49:22,527:INFO:Initializing predict_model()
2023-08-08 22:49:22,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF332880>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143D357F3A0>)
2023-08-08 22:49:22,527:INFO:Checking exceptions
2023-08-08 22:49:22,528:INFO:Preloading libraries
2023-08-08 22:49:22,529:INFO:Set up data.
2023-08-08 22:49:22,535:INFO:Set up index.
2023-08-08 22:53:48,926:INFO:Initializing predict_model()
2023-08-08 22:53:48,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF4AD490>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143D357F430>)
2023-08-08 22:53:48,926:INFO:Checking exceptions
2023-08-08 22:53:48,926:INFO:Preloading libraries
2023-08-08 22:54:25,792:INFO:Initializing predict_model()
2023-08-08 22:54:25,792:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF8BB220>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EF2DE430>)
2023-08-08 22:54:25,793:INFO:Checking exceptions
2023-08-08 22:54:25,793:INFO:Preloading libraries
2023-08-08 23:04:45,767:INFO:Initializing predict_model()
2023-08-08 23:04:45,767:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143D3571E20>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EF9A0820>)
2023-08-08 23:04:45,768:INFO:Checking exceptions
2023-08-08 23:04:45,768:INFO:Preloading libraries
2023-08-08 23:04:45,769:INFO:Set up data.
2023-08-08 23:04:45,775:INFO:Set up index.
2023-08-08 23:07:53,841:INFO:Initializing predict_model()
2023-08-08 23:07:53,841:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EF437A90>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EB1FB310>)
2023-08-08 23:07:53,841:INFO:Checking exceptions
2023-08-08 23:07:53,841:INFO:Preloading libraries
2023-08-09 00:45:39,416:INFO:Initializing predict_model()
2023-08-09 00:45:39,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EFB7DD90>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EFB76310>)
2023-08-09 00:45:39,417:INFO:Checking exceptions
2023-08-09 00:45:39,417:INFO:Preloading libraries
2023-08-09 00:45:39,418:INFO:Set up data.
2023-08-09 00:45:39,427:INFO:Set up index.
2023-08-09 00:46:38,697:INFO:Initializing predict_model()
2023-08-09 00:46:38,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000143EFB7DD30>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000143EB3FF310>)
2023-08-09 00:46:38,698:INFO:Checking exceptions
2023-08-09 00:46:38,698:INFO:Preloading libraries
2023-08-09 00:46:38,698:INFO:Set up data.
2023-08-09 00:46:38,704:INFO:Set up index.
2023-08-09 00:47:17,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:47:17,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:47:17,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:47:17,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:47:20,332:INFO:Initializing load_model()
2023-08-09 00:47:20,332:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-09 00:47:20,377:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-09 00:47:20,396:INFO:Initializing predict_model()
2023-08-09 00:47:20,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D29F4238B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImput...
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.9, bagging_freq=6,
                               feature_fraction=0.6, min_child_samples=81,
                               min_split_gain=0.7, n_estimators=240, n_jobs=-1,
                               num_leaves=100, random_state=2927,
                               reg_alpha=1e-06, reg_lambda=0.1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D2A33DBDC0>)
2023-08-09 00:47:20,397:INFO:Checking exceptions
2023-08-09 00:47:20,397:INFO:Preloading libraries
2023-08-09 00:47:20,397:INFO:Set up data.
2023-08-09 00:47:20,404:INFO:Set up index.
2023-08-09 00:55:24,430:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:55:24,430:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:55:24,430:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:55:24,431:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:55:27,369:INFO:Initializing load_model()
2023-08-09 00:55:27,369:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-09 00:56:57,062:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:56:57,062:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:56:57,062:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:56:57,063:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:56:59,785:INFO:Initializing load_model()
2023-08-09 00:56:59,786:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-09 00:57:00,226:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-09 00:57:00,235:INFO:Initializing predict_model()
2023-08-09 00:57:00,235:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001842323CAF0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x00000184232CB5E0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000184245EFD30>)
2023-08-09 00:57:00,236:INFO:Checking exceptions
2023-08-09 00:57:00,236:INFO:Preloading libraries
2023-08-09 00:57:00,236:INFO:Set up data.
2023-08-09 00:57:00,240:INFO:Set up index.
2023-08-09 00:58:10,494:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:58:10,495:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:58:10,495:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:58:10,495:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 00:58:15,021:INFO:Initializing load_model()
2023-08-09 00:58:15,021:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-09 00:58:15,099:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-09 00:58:15,110:INFO:Initializing predict_model()
2023-08-09 00:58:15,110:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6CDC4F40>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA73A0>)
2023-08-09 00:58:15,111:INFO:Checking exceptions
2023-08-09 00:58:15,111:INFO:Preloading libraries
2023-08-09 00:58:15,111:INFO:Set up data.
2023-08-09 00:58:15,119:INFO:Set up index.
2023-08-09 00:58:40,076:INFO:Initializing predict_model()
2023-08-09 00:58:40,077:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6CDC4EB0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA7E50>)
2023-08-09 00:58:40,077:INFO:Checking exceptions
2023-08-09 00:58:40,078:INFO:Preloading libraries
2023-08-09 00:58:40,078:INFO:Set up data.
2023-08-09 00:58:40,083:INFO:Set up index.
2023-08-09 01:10:37,973:INFO:Initializing predict_model()
2023-08-09 01:10:37,973:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6CB7FA60>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA7C10>)
2023-08-09 01:10:37,974:INFO:Checking exceptions
2023-08-09 01:10:37,974:INFO:Preloading libraries
2023-08-09 01:10:37,974:INFO:Set up data.
2023-08-09 01:10:37,981:INFO:Set up index.
2023-08-09 01:11:02,949:INFO:Initializing predict_model()
2023-08-09 01:11:02,949:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DE9DD60>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6CB4EF70>)
2023-08-09 01:11:02,950:INFO:Checking exceptions
2023-08-09 01:11:02,950:INFO:Preloading libraries
2023-08-09 01:11:02,951:INFO:Set up data.
2023-08-09 01:11:02,955:INFO:Set up index.
2023-08-09 01:12:27,526:INFO:Initializing predict_model()
2023-08-09 01:12:27,526:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DF60F10>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB676A6AF0>)
2023-08-09 01:12:27,526:INFO:Checking exceptions
2023-08-09 01:12:27,526:INFO:Preloading libraries
2023-08-09 01:12:27,527:INFO:Set up data.
2023-08-09 01:12:27,532:INFO:Set up index.
2023-08-09 01:16:53,131:INFO:Initializing predict_model()
2023-08-09 01:16:53,132:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6CB3F5B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6CAA5670>)
2023-08-09 01:16:53,132:INFO:Checking exceptions
2023-08-09 01:16:53,132:INFO:Preloading libraries
2023-08-09 01:16:53,132:INFO:Set up data.
2023-08-09 01:16:53,138:INFO:Set up index.
2023-08-09 01:17:25,810:INFO:Initializing predict_model()
2023-08-09 01:17:25,810:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DF8EC40>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB676A6AF0>)
2023-08-09 01:17:25,810:INFO:Checking exceptions
2023-08-09 01:17:25,810:INFO:Preloading libraries
2023-08-09 01:17:25,811:INFO:Set up data.
2023-08-09 01:17:25,815:INFO:Set up index.
2023-08-09 01:17:33,254:INFO:Initializing predict_model()
2023-08-09 01:17:33,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DFA1AC0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB676A6D30>)
2023-08-09 01:17:33,255:INFO:Checking exceptions
2023-08-09 01:17:33,255:INFO:Preloading libraries
2023-08-09 01:17:33,255:INFO:Set up data.
2023-08-09 01:17:33,261:INFO:Set up index.
2023-08-09 01:17:40,008:INFO:Initializing predict_model()
2023-08-09 01:17:40,009:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DFBD1F0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6CAA5670>)
2023-08-09 01:17:40,009:INFO:Checking exceptions
2023-08-09 01:17:40,009:INFO:Preloading libraries
2023-08-09 01:17:40,010:INFO:Set up data.
2023-08-09 01:17:40,014:INFO:Set up index.
2023-08-09 01:17:47,474:INFO:Initializing predict_model()
2023-08-09 01:17:47,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6DFFBF10>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB676A6B80>)
2023-08-09 01:17:47,474:INFO:Checking exceptions
2023-08-09 01:17:47,474:INFO:Preloading libraries
2023-08-09 01:17:47,475:INFO:Set up data.
2023-08-09 01:17:47,479:INFO:Set up index.
2023-08-09 01:17:57,108:INFO:Initializing predict_model()
2023-08-09 01:17:57,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E0003A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6CAA54C0>)
2023-08-09 01:17:57,109:INFO:Checking exceptions
2023-08-09 01:17:57,109:INFO:Preloading libraries
2023-08-09 01:17:57,110:INFO:Set up data.
2023-08-09 01:17:57,114:INFO:Set up index.
2023-08-09 01:18:23,953:INFO:Initializing predict_model()
2023-08-09 01:18:23,953:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E029B50>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA7EE0>)
2023-08-09 01:18:23,953:INFO:Checking exceptions
2023-08-09 01:18:23,954:INFO:Preloading libraries
2023-08-09 01:18:23,954:INFO:Set up data.
2023-08-09 01:18:23,958:INFO:Set up index.
2023-08-09 01:18:30,811:INFO:Initializing predict_model()
2023-08-09 01:18:30,811:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E06BFD0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA7D30>)
2023-08-09 01:18:30,812:INFO:Checking exceptions
2023-08-09 01:18:30,812:INFO:Preloading libraries
2023-08-09 01:18:30,812:INFO:Set up data.
2023-08-09 01:18:30,817:INFO:Set up index.
2023-08-09 01:18:37,206:INFO:Initializing predict_model()
2023-08-09 01:18:37,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E094C40>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E095160>)
2023-08-09 01:18:37,207:INFO:Checking exceptions
2023-08-09 01:18:37,207:INFO:Preloading libraries
2023-08-09 01:18:37,208:INFO:Set up data.
2023-08-09 01:18:37,213:INFO:Set up index.
2023-08-09 01:18:42,560:INFO:Initializing predict_model()
2023-08-09 01:18:42,560:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E06B5E0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E0A11F0>)
2023-08-09 01:18:42,560:INFO:Checking exceptions
2023-08-09 01:18:42,560:INFO:Preloading libraries
2023-08-09 01:18:42,560:INFO:Set up data.
2023-08-09 01:18:42,565:INFO:Set up index.
2023-08-09 01:18:46,839:INFO:Initializing predict_model()
2023-08-09 01:18:46,839:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E0BEFA0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E0D91F0>)
2023-08-09 01:18:46,839:INFO:Checking exceptions
2023-08-09 01:18:46,839:INFO:Preloading libraries
2023-08-09 01:18:46,840:INFO:Set up data.
2023-08-09 01:18:46,844:INFO:Set up index.
2023-08-09 01:18:52,091:INFO:Initializing predict_model()
2023-08-09 01:18:52,091:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E0F59D0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6DEA7D30>)
2023-08-09 01:18:52,091:INFO:Checking exceptions
2023-08-09 01:18:52,091:INFO:Preloading libraries
2023-08-09 01:18:52,092:INFO:Set up data.
2023-08-09 01:18:52,096:INFO:Set up index.
2023-08-09 01:19:07,474:INFO:Initializing predict_model()
2023-08-09 01:19:07,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E0FA880>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E027160>)
2023-08-09 01:19:07,475:INFO:Checking exceptions
2023-08-09 01:19:07,475:INFO:Preloading libraries
2023-08-09 01:19:07,475:INFO:Set up data.
2023-08-09 01:19:07,480:INFO:Set up index.
2023-08-09 01:19:14,270:INFO:Initializing predict_model()
2023-08-09 01:19:14,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E13AFD0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6CAA5790>)
2023-08-09 01:19:14,271:INFO:Checking exceptions
2023-08-09 01:19:14,271:INFO:Preloading libraries
2023-08-09 01:19:14,271:INFO:Set up data.
2023-08-09 01:19:14,275:INFO:Set up index.
2023-08-09 01:23:14,263:INFO:Initializing predict_model()
2023-08-09 01:23:14,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E13FE80>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E168280>)
2023-08-09 01:23:14,263:INFO:Checking exceptions
2023-08-09 01:23:14,263:INFO:Preloading libraries
2023-08-09 01:23:14,263:INFO:Set up data.
2023-08-09 01:23:14,267:INFO:Set up index.
2023-08-09 01:24:35,893:INFO:Initializing predict_model()
2023-08-09 01:24:35,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E192F10>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E1870D0>)
2023-08-09 01:24:35,894:INFO:Checking exceptions
2023-08-09 01:24:35,894:INFO:Preloading libraries
2023-08-09 01:24:35,895:INFO:Set up data.
2023-08-09 01:24:35,899:INFO:Set up index.
2023-08-09 01:24:58,493:INFO:Initializing predict_model()
2023-08-09 01:24:58,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E16C6D0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E188310>)
2023-08-09 01:24:58,493:INFO:Checking exceptions
2023-08-09 01:24:58,493:INFO:Preloading libraries
2023-08-09 01:24:58,494:INFO:Set up data.
2023-08-09 01:24:58,498:INFO:Set up index.
2023-08-09 01:26:01,487:INFO:Initializing predict_model()
2023-08-09 01:26:01,487:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E167AF0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB676A6CA0>)
2023-08-09 01:26:01,487:INFO:Checking exceptions
2023-08-09 01:26:01,487:INFO:Preloading libraries
2023-08-09 01:26:01,488:INFO:Set up data.
2023-08-09 01:26:01,492:INFO:Set up index.
2023-08-09 01:26:19,610:INFO:Initializing predict_model()
2023-08-09 01:26:19,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CB6E000190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x000001CB6CBD00A0>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB6E1BB550>)
2023-08-09 01:26:19,610:INFO:Checking exceptions
2023-08-09 01:26:19,610:INFO:Preloading libraries
2023-08-09 01:26:19,610:INFO:Set up data.
2023-08-09 01:26:19,615:INFO:Set up index.
2023-08-09 21:09:49,733:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 21:09:49,733:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 21:09:49,733:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 21:09:49,733:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-09 21:09:50,476:INFO:Initializing load_model()
2023-08-09 21:09:50,476:INFO:load_model(model_name=stc0_model_010, platform=None, authentication=None, verbose=True)
2023-08-09 21:09:51,010:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '59.8.0', 'pycaret': '3.0.4', 'IPython': '8.14.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.7.3', 'joblib': '1.2.0', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.2', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.3', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.2.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-09 21:10:10,541:INFO:Initializing predict_model()
2023-08-09 21:10:10,541:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025E7FCF42B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x0000025E7E79F970>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025E7FCF23A0>)
2023-08-09 21:10:10,541:INFO:Checking exceptions
2023-08-09 21:10:10,541:INFO:Preloading libraries
2023-08-09 21:10:10,541:INFO:Set up data.
2023-08-09 21:10:10,547:INFO:Set up index.
2023-08-09 21:10:30,933:INFO:Initializing predict_model()
2023-08-09 21:10:30,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025E7EBEC5B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x0000025E7E79F970>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025E7FCF23A0>)
2023-08-09 21:10:30,934:INFO:Checking exceptions
2023-08-09 21:10:30,934:INFO:Preloading libraries
2023-08-09 21:10:30,934:INFO:Set up data.
2023-08-09 21:10:30,939:INFO:Set up index.
2023-08-09 21:11:01,636:INFO:Initializing predict_model()
2023-08-09 21:11:01,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025E7FCB3730>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x0000025E7E79F970>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025E62EE5430>)
2023-08-09 21:11:01,637:INFO:Checking exceptions
2023-08-09 21:11:01,637:INFO:Preloading libraries
2023-08-09 21:11:01,637:INFO:Set up data.
2023-08-09 21:11:01,642:INFO:Set up index.
2023-08-09 21:14:16,219:INFO:Initializing predict_model()
2023-08-09 21:14:16,220:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025E7FDD2EB0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'gdp'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 BaggingRegressor(estimator=<catboost.core.CatBoostRegressor object at 0x0000025E7E79F970>,
                                  random_state=5661))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025E7FCF24C0>)
2023-08-09 21:14:16,220:INFO:Checking exceptions
2023-08-09 21:14:16,220:INFO:Preloading libraries
2023-08-09 21:14:16,220:INFO:Set up data.
2023-08-09 21:14:16,225:INFO:Set up index.
2023-08-10 21:24:34,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:24:34,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:24:34,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:24:34,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:24:35,701:INFO:Initializing load_model()
2023-08-10 21:24:35,701:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-10 21:24:35,843:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-10 21:24:48,431:INFO:Initializing predict_model()
2023-08-10 21:24:48,431:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017CA7C62550>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017CA7C65160>)
2023-08-10 21:24:48,431:INFO:Checking exceptions
2023-08-10 21:24:48,431:INFO:Preloading libraries
2023-08-10 21:24:48,431:INFO:Set up data.
2023-08-10 21:24:48,437:INFO:Set up index.
2023-08-10 21:25:51,265:INFO:Initializing predict_model()
2023-08-10 21:25:51,265:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C8BEA7A30>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017C8BD40820>)
2023-08-10 21:25:51,265:INFO:Checking exceptions
2023-08-10 21:25:51,265:INFO:Preloading libraries
2023-08-10 21:25:51,265:INFO:Set up data.
2023-08-10 21:25:51,271:INFO:Set up index.
2023-08-10 21:35:51,092:INFO:Initializing predict_model()
2023-08-10 21:35:51,092:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017CA7C62DC0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017CA7C651F0>)
2023-08-10 21:35:51,092:INFO:Checking exceptions
2023-08-10 21:35:51,092:INFO:Preloading libraries
2023-08-10 21:35:51,092:INFO:Set up data.
2023-08-10 21:35:51,103:INFO:Set up index.
2023-08-10 21:36:29,796:INFO:Initializing predict_model()
2023-08-10 21:36:29,796:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017CA7F69D90>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017C8BD40D30>)
2023-08-10 21:36:29,796:INFO:Checking exceptions
2023-08-10 21:36:29,796:INFO:Preloading libraries
2023-08-10 21:36:29,796:INFO:Set up data.
2023-08-10 21:36:29,796:INFO:Set up index.
2023-08-10 21:40:59,674:INFO:Initializing predict_model()
2023-08-10 21:40:59,674:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017CA7AAC340>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017C8BF945E0>)
2023-08-10 21:40:59,674:INFO:Checking exceptions
2023-08-10 21:40:59,674:INFO:Preloading libraries
2023-08-10 21:40:59,674:INFO:Set up data.
2023-08-10 21:40:59,681:INFO:Set up index.
2023-08-10 21:54:44,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:54:44,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:54:44,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:54:44,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:54:45,636:INFO:Initializing load_model()
2023-08-10 21:54:45,636:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-10 21:54:45,716:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-10 21:54:48,396:INFO:Initializing predict_model()
2023-08-10 21:54:48,397:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000230ABC5C4F0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002308FF7DD30>)
2023-08-10 21:54:48,397:INFO:Checking exceptions
2023-08-10 21:54:48,397:INFO:Preloading libraries
2023-08-10 21:54:48,397:INFO:Set up data.
2023-08-10 21:54:48,403:INFO:Set up index.
2023-08-10 21:55:25,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:55:25,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:55:25,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:55:25,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:55:26,534:INFO:Initializing load_model()
2023-08-10 21:55:26,534:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-10 21:55:26,588:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-10 21:55:30,187:INFO:Initializing predict_model()
2023-08-10 21:55:30,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022C9283BE50>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022C92904F70>)
2023-08-10 21:55:30,188:INFO:Checking exceptions
2023-08-10 21:55:30,188:INFO:Preloading libraries
2023-08-10 21:55:30,188:INFO:Set up data.
2023-08-10 21:55:30,195:INFO:Set up index.
2023-08-10 21:57:20,467:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:57:20,467:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:57:20,467:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:57:20,467:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:57:21,164:INFO:Initializing load_model()
2023-08-10 21:57:21,164:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-10 21:57:21,245:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '4.0.0', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-10 21:58:48,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:58:48,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:58:48,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:58:48,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-10 21:58:49,632:INFO:Initializing load_model()
2023-08-10 21:58:49,632:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-10 21:58:49,718:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-10 21:58:52,000:INFO:Initializing predict_model()
2023-08-10 21:58:52,000:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C1FEFA0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C50D9D0>)
2023-08-10 21:58:52,000:INFO:Checking exceptions
2023-08-10 21:58:52,000:INFO:Preloading libraries
2023-08-10 21:58:52,001:INFO:Set up data.
2023-08-10 21:58:52,006:INFO:Set up index.
2023-08-10 22:05:14,542:INFO:Initializing predict_model()
2023-08-10 22:05:14,542:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6159D0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001442070ED30>)
2023-08-10 22:05:14,542:INFO:Checking exceptions
2023-08-10 22:05:14,542:INFO:Preloading libraries
2023-08-10 22:05:14,542:INFO:Set up data.
2023-08-10 22:05:14,550:INFO:Set up index.
2023-08-10 22:10:44,239:INFO:Initializing predict_model()
2023-08-10 22:10:44,239:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6A4160>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5DC0>)
2023-08-10 22:10:44,240:INFO:Checking exceptions
2023-08-10 22:10:44,240:INFO:Preloading libraries
2023-08-10 22:10:44,240:INFO:Set up data.
2023-08-10 22:10:44,242:INFO:Set up index.
2023-08-10 22:12:18,785:INFO:Initializing predict_model()
2023-08-10 22:12:18,785:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6AB070>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C4CFEE0>)
2023-08-10 22:12:18,785:INFO:Checking exceptions
2023-08-10 22:12:18,785:INFO:Preloading libraries
2023-08-10 22:12:18,785:INFO:Set up data.
2023-08-10 22:12:18,791:INFO:Set up index.
2023-08-10 22:13:09,038:INFO:Initializing predict_model()
2023-08-10 22:13:09,039:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C69E4F0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A54C0>)
2023-08-10 22:13:09,039:INFO:Checking exceptions
2023-08-10 22:13:09,039:INFO:Preloading libraries
2023-08-10 22:13:09,039:INFO:Set up data.
2023-08-10 22:13:09,048:INFO:Set up index.
2023-08-10 22:13:30,426:INFO:Initializing predict_model()
2023-08-10 22:13:30,426:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C619070>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C6B9310>)
2023-08-10 22:13:30,427:INFO:Checking exceptions
2023-08-10 22:13:30,427:INFO:Preloading libraries
2023-08-10 22:13:30,427:INFO:Set up data.
2023-08-10 22:13:30,432:INFO:Set up index.
2023-08-10 22:13:46,328:INFO:Initializing predict_model()
2023-08-10 22:13:46,328:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6E9100>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C6F01F0>)
2023-08-10 22:13:46,328:INFO:Checking exceptions
2023-08-10 22:13:46,328:INFO:Preloading libraries
2023-08-10 22:13:46,328:INFO:Set up data.
2023-08-10 22:13:46,339:INFO:Set up index.
2023-08-10 22:14:43,675:INFO:Initializing predict_model()
2023-08-10 22:14:43,676:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C700C70>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C57C3A0>)
2023-08-10 22:14:43,676:INFO:Checking exceptions
2023-08-10 22:14:43,676:INFO:Preloading libraries
2023-08-10 22:14:43,676:INFO:Set up data.
2023-08-10 22:14:43,680:INFO:Set up index.
2023-08-10 22:35:50,560:INFO:Initializing predict_model()
2023-08-10 22:35:50,560:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C670DC0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C57C040>)
2023-08-10 22:35:50,561:INFO:Checking exceptions
2023-08-10 22:35:50,561:INFO:Preloading libraries
2023-08-10 22:35:50,561:INFO:Set up data.
2023-08-10 22:35:50,568:INFO:Set up index.
2023-08-10 22:38:41,080:INFO:Initializing predict_model()
2023-08-10 22:38:41,081:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6516A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5E50>)
2023-08-10 22:38:41,082:INFO:Checking exceptions
2023-08-10 22:38:41,082:INFO:Preloading libraries
2023-08-10 22:38:41,083:INFO:Set up data.
2023-08-10 22:38:41,090:INFO:Set up index.
2023-08-10 22:38:41,497:INFO:Initializing predict_model()
2023-08-10 22:38:41,497:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C6D3B20>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000144204C0040>)
2023-08-10 22:38:41,497:INFO:Checking exceptions
2023-08-10 22:38:41,498:INFO:Preloading libraries
2023-08-10 22:38:41,498:INFO:Set up data.
2023-08-10 22:38:41,504:INFO:Set up index.
2023-08-11 00:19:07,858:INFO:Initializing predict_model()
2023-08-11 00:19:07,858:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C76ACA0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5DC0>)
2023-08-11 00:19:07,859:INFO:Checking exceptions
2023-08-11 00:19:07,859:INFO:Preloading libraries
2023-08-11 00:19:07,859:INFO:Set up data.
2023-08-11 00:19:07,863:INFO:Set up index.
2023-08-11 00:20:35,080:INFO:Initializing predict_model()
2023-08-11 00:20:35,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C91E760>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001442070E8B0>)
2023-08-11 00:20:35,080:INFO:Checking exceptions
2023-08-11 00:20:35,081:INFO:Preloading libraries
2023-08-11 00:20:35,081:INFO:Set up data.
2023-08-11 00:20:35,086:INFO:Set up index.
2023-08-11 00:22:21,754:INFO:Initializing predict_model()
2023-08-11 00:22:21,755:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C94BBB0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C50D9D0>)
2023-08-11 00:22:21,755:INFO:Checking exceptions
2023-08-11 00:22:21,755:INFO:Preloading libraries
2023-08-11 00:22:21,755:INFO:Set up data.
2023-08-11 00:22:21,761:INFO:Set up index.
2023-08-11 00:23:52,603:INFO:Initializing predict_model()
2023-08-11 00:23:52,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C763430>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001442070EA60>)
2023-08-11 00:23:52,604:INFO:Checking exceptions
2023-08-11 00:23:52,604:INFO:Preloading libraries
2023-08-11 00:23:52,604:INFO:Set up data.
2023-08-11 00:23:52,608:INFO:Set up index.
2023-08-11 00:31:23,473:INFO:Initializing predict_model()
2023-08-11 00:31:23,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C8DD520>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AE9D0>)
2023-08-11 00:31:23,474:INFO:Checking exceptions
2023-08-11 00:31:23,474:INFO:Preloading libraries
2023-08-11 00:31:23,475:INFO:Set up data.
2023-08-11 00:31:23,479:INFO:Set up index.
2023-08-11 00:32:42,519:INFO:Initializing predict_model()
2023-08-11 00:32:42,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C8F1910>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A59D0>)
2023-08-11 00:32:42,519:INFO:Checking exceptions
2023-08-11 00:32:42,519:INFO:Preloading libraries
2023-08-11 00:32:42,519:INFO:Set up data.
2023-08-11 00:32:42,524:INFO:Set up index.
2023-08-11 00:33:37,149:INFO:Initializing predict_model()
2023-08-11 00:33:37,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C904160>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5EE0>)
2023-08-11 00:33:37,150:INFO:Checking exceptions
2023-08-11 00:33:37,150:INFO:Preloading libraries
2023-08-11 00:33:37,150:INFO:Set up data.
2023-08-11 00:33:37,154:INFO:Set up index.
2023-08-11 00:34:02,498:INFO:Initializing predict_model()
2023-08-11 00:34:02,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C8F1340>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5E50>)
2023-08-11 00:34:02,498:INFO:Checking exceptions
2023-08-11 00:34:02,498:INFO:Preloading libraries
2023-08-11 00:34:02,499:INFO:Set up data.
2023-08-11 00:34:02,503:INFO:Set up index.
2023-08-11 00:34:14,169:INFO:Initializing predict_model()
2023-08-11 00:34:14,171:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C926820>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5CA0>)
2023-08-11 00:34:14,171:INFO:Checking exceptions
2023-08-11 00:34:14,172:INFO:Preloading libraries
2023-08-11 00:34:14,172:INFO:Set up data.
2023-08-11 00:34:14,177:INFO:Set up index.
2023-08-11 00:34:28,823:INFO:Initializing predict_model()
2023-08-11 00:34:28,823:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C9BC9A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5EE0>)
2023-08-11 00:34:28,824:INFO:Checking exceptions
2023-08-11 00:34:28,824:INFO:Preloading libraries
2023-08-11 00:34:28,824:INFO:Set up data.
2023-08-11 00:34:28,829:INFO:Set up index.
2023-08-11 00:34:41,157:INFO:Initializing predict_model()
2023-08-11 00:34:41,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C9CA700>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5940>)
2023-08-11 00:34:41,158:INFO:Checking exceptions
2023-08-11 00:34:41,158:INFO:Preloading libraries
2023-08-11 00:34:41,158:INFO:Set up data.
2023-08-11 00:34:41,162:INFO:Set up index.
2023-08-11 00:34:59,484:INFO:Initializing predict_model()
2023-08-11 00:34:59,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C9CA1C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5CA0>)
2023-08-11 00:34:59,484:INFO:Checking exceptions
2023-08-11 00:34:59,484:INFO:Preloading libraries
2023-08-11 00:34:59,484:INFO:Set up data.
2023-08-11 00:34:59,500:INFO:Set up index.
2023-08-11 00:39:22,378:INFO:Initializing predict_model()
2023-08-11 00:39:22,378:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C9EDD30>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5670>)
2023-08-11 00:39:22,378:INFO:Checking exceptions
2023-08-11 00:39:22,378:INFO:Preloading libraries
2023-08-11 00:39:22,379:INFO:Set up data.
2023-08-11 00:39:22,383:INFO:Set up index.
2023-08-11 00:39:53,298:INFO:Initializing predict_model()
2023-08-11 00:39:53,299:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA05AC0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5EE0>)
2023-08-11 00:39:53,299:INFO:Checking exceptions
2023-08-11 00:39:53,300:INFO:Preloading libraries
2023-08-11 00:39:53,300:INFO:Set up data.
2023-08-11 00:39:53,309:INFO:Set up index.
2023-08-11 00:46:26,872:INFO:Initializing predict_model()
2023-08-11 00:46:26,872:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA15460>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5F70>)
2023-08-11 00:46:26,872:INFO:Checking exceptions
2023-08-11 00:46:26,872:INFO:Preloading libraries
2023-08-11 00:46:26,872:INFO:Set up data.
2023-08-11 00:46:26,888:INFO:Set up index.
2023-08-11 00:46:36,866:INFO:Initializing predict_model()
2023-08-11 00:46:36,867:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA17670>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5820>)
2023-08-11 00:46:36,867:INFO:Checking exceptions
2023-08-11 00:46:36,867:INFO:Preloading libraries
2023-08-11 00:46:36,869:INFO:Set up data.
2023-08-11 00:46:36,873:INFO:Set up index.
2023-08-11 00:46:48,806:INFO:Initializing predict_model()
2023-08-11 00:46:48,806:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA15730>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5820>)
2023-08-11 00:46:48,806:INFO:Checking exceptions
2023-08-11 00:46:48,806:INFO:Preloading libraries
2023-08-11 00:46:48,807:INFO:Set up data.
2023-08-11 00:46:48,811:INFO:Set up index.
2023-08-11 00:46:58,527:INFO:Initializing predict_model()
2023-08-11 00:46:58,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA4FFA0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001442070ED30>)
2023-08-11 00:46:58,527:INFO:Checking exceptions
2023-08-11 00:46:58,527:INFO:Preloading libraries
2023-08-11 00:46:58,528:INFO:Set up data.
2023-08-11 00:46:58,538:INFO:Set up index.
2023-08-11 00:47:34,428:INFO:Initializing predict_model()
2023-08-11 00:47:34,428:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA15370>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001442070E790>)
2023-08-11 00:47:34,428:INFO:Checking exceptions
2023-08-11 00:47:34,428:INFO:Preloading libraries
2023-08-11 00:47:34,429:INFO:Set up data.
2023-08-11 00:47:34,435:INFO:Set up index.
2023-08-11 00:47:50,802:INFO:Initializing predict_model()
2023-08-11 00:47:50,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA42E80>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5550>)
2023-08-11 00:47:50,802:INFO:Checking exceptions
2023-08-11 00:47:50,802:INFO:Preloading libraries
2023-08-11 00:47:50,802:INFO:Set up data.
2023-08-11 00:47:50,806:INFO:Set up index.
2023-08-11 00:48:15,311:INFO:Initializing predict_model()
2023-08-11 00:48:15,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAA1F70>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5EE0>)
2023-08-11 00:48:15,311:INFO:Checking exceptions
2023-08-11 00:48:15,311:INFO:Preloading libraries
2023-08-11 00:48:15,311:INFO:Set up data.
2023-08-11 00:48:15,316:INFO:Set up index.
2023-08-11 00:48:45,646:INFO:Initializing predict_model()
2023-08-11 00:48:45,646:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAB2D60>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5EE0>)
2023-08-11 00:48:45,646:INFO:Checking exceptions
2023-08-11 00:48:45,646:INFO:Preloading libraries
2023-08-11 00:48:45,646:INFO:Set up data.
2023-08-11 00:48:45,654:INFO:Set up index.
2023-08-11 00:51:16,905:INFO:Initializing predict_model()
2023-08-11 00:51:16,905:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA9CC70>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5E50>)
2023-08-11 00:51:16,906:INFO:Checking exceptions
2023-08-11 00:51:16,906:INFO:Preloading libraries
2023-08-11 00:51:16,906:INFO:Set up data.
2023-08-11 00:51:16,910:INFO:Set up index.
2023-08-11 00:52:42,099:INFO:Initializing predict_model()
2023-08-11 00:52:42,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA5CA60>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AE670>)
2023-08-11 00:52:42,099:INFO:Checking exceptions
2023-08-11 00:52:42,100:INFO:Preloading libraries
2023-08-11 00:52:42,100:INFO:Set up data.
2023-08-11 00:52:42,105:INFO:Set up index.
2023-08-11 00:53:00,165:INFO:Initializing predict_model()
2023-08-11 00:53:00,165:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAB8A30>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEAF0>)
2023-08-11 00:53:00,165:INFO:Checking exceptions
2023-08-11 00:53:00,165:INFO:Preloading libraries
2023-08-11 00:53:00,166:INFO:Set up data.
2023-08-11 00:53:00,170:INFO:Set up index.
2023-08-11 00:55:23,167:INFO:Initializing predict_model()
2023-08-11 00:55:23,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443C98B970>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEEE0>)
2023-08-11 00:55:23,167:INFO:Checking exceptions
2023-08-11 00:55:23,167:INFO:Preloading libraries
2023-08-11 00:55:23,167:INFO:Set up data.
2023-08-11 00:55:23,172:INFO:Set up index.
2023-08-11 00:55:32,527:INFO:Initializing predict_model()
2023-08-11 00:55:32,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CA57280>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AE9D0>)
2023-08-11 00:55:32,527:INFO:Checking exceptions
2023-08-11 00:55:32,528:INFO:Preloading libraries
2023-08-11 00:55:32,528:INFO:Set up data.
2023-08-11 00:55:32,532:INFO:Set up index.
2023-08-11 00:55:47,828:INFO:Initializing predict_model()
2023-08-11 00:55:47,828:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAE8FD0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEA60>)
2023-08-11 00:55:47,828:INFO:Checking exceptions
2023-08-11 00:55:47,829:INFO:Preloading libraries
2023-08-11 00:55:47,829:INFO:Set up data.
2023-08-11 00:55:47,833:INFO:Set up index.
2023-08-11 00:57:01,100:INFO:Initializing predict_model()
2023-08-11 00:57:01,100:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CACDE80>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEEE0>)
2023-08-11 00:57:01,100:INFO:Checking exceptions
2023-08-11 00:57:01,100:INFO:Preloading libraries
2023-08-11 00:57:01,100:INFO:Set up data.
2023-08-11 00:57:01,104:INFO:Set up index.
2023-08-11 00:57:27,814:INFO:Initializing predict_model()
2023-08-11 00:57:27,814:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAF99A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEF70>)
2023-08-11 00:57:27,815:INFO:Checking exceptions
2023-08-11 00:57:27,815:INFO:Preloading libraries
2023-08-11 00:57:27,815:INFO:Set up data.
2023-08-11 00:57:27,820:INFO:Set up index.
2023-08-11 00:58:03,535:INFO:Initializing predict_model()
2023-08-11 00:58:03,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CAE3400>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C57C040>)
2023-08-11 00:58:03,536:INFO:Checking exceptions
2023-08-11 00:58:03,537:INFO:Preloading libraries
2023-08-11 00:58:03,537:INFO:Set up data.
2023-08-11 00:58:03,541:INFO:Set up index.
2023-08-11 00:58:11,573:INFO:Initializing predict_model()
2023-08-11 00:58:11,574:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CB02BB0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C8AEE50>)
2023-08-11 00:58:11,574:INFO:Checking exceptions
2023-08-11 00:58:11,574:INFO:Preloading libraries
2023-08-11 00:58:11,574:INFO:Set up data.
2023-08-11 00:58:11,579:INFO:Set up index.
2023-08-11 01:03:10,296:INFO:Initializing predict_model()
2023-08-11 01:03:10,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CB2F4C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A5E50>)
2023-08-11 01:03:10,296:INFO:Checking exceptions
2023-08-11 01:03:10,296:INFO:Preloading libraries
2023-08-11 01:03:10,296:INFO:Set up data.
2023-08-11 01:03:10,311:INFO:Set up index.
2023-08-11 01:08:59,133:INFO:Initializing predict_model()
2023-08-11 01:08:59,133:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001443CB7F970>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation',
                                             'MaxTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator', LGBMRegressor(random_state=5990))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001443C5A55E0>)
2023-08-11 01:08:59,133:INFO:Checking exceptions
2023-08-11 01:08:59,133:INFO:Preloading libraries
2023-08-11 01:08:59,133:INFO:Set up data.
2023-08-11 01:08:59,151:INFO:Set up index.
2023-08-11 01:11:01,093:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 01:11:01,093:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 01:11:01,093:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 01:11:01,093:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 01:11:01,232:INFO:Initializing load_model()
2023-08-11 01:11:01,232:INFO:load_model(model_name=stc0_model_011, platform=None, authentication=None, verbose=True)
2023-08-11 01:11:01,293:WARNING:C:\Users\ironh\.conda\envs\streamlit\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '68.0.0', 'pycaret': '3.0.4', 'IPython': '8.12.2', 'ipywidgets': '8.1.0', 'tqdm': '4.65.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.57.1', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.17', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.65.0', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.11.1', 'joblib': '1.3.1', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.1', 'lightgbm': '3.3.5', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.2', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.13.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.5', 'sktime': '0.21.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-11 01:11:08,194:INFO:Initializing predict_model()
2023-08-11 01:11:08,194:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AECA0B20>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEC9F670>)
2023-08-11 01:11:08,194:INFO:Checking exceptions
2023-08-11 01:11:08,194:INFO:Preloading libraries
2023-08-11 01:11:08,194:INFO:Set up data.
2023-08-11 01:11:08,197:INFO:Set up index.
2023-08-11 01:14:38,901:INFO:Initializing predict_model()
2023-08-11 01:14:38,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED7A910>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AE912D30>)
2023-08-11 01:14:38,902:INFO:Checking exceptions
2023-08-11 01:14:38,902:INFO:Preloading libraries
2023-08-11 01:14:38,902:INFO:Set up data.
2023-08-11 01:14:38,906:INFO:Set up index.
2023-08-11 01:15:19,189:INFO:Initializing predict_model()
2023-08-11 01:15:19,189:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000029292DB1850>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AE912CA0>)
2023-08-11 01:15:19,189:INFO:Checking exceptions
2023-08-11 01:15:19,189:INFO:Preloading libraries
2023-08-11 01:15:19,189:INFO:Set up data.
2023-08-11 01:15:19,193:INFO:Set up index.
2023-08-11 01:17:13,624:INFO:Initializing predict_model()
2023-08-11 01:17:13,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED1CAF0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DBF8B0>)
2023-08-11 01:17:13,625:INFO:Checking exceptions
2023-08-11 01:17:13,626:INFO:Preloading libraries
2023-08-11 01:17:13,626:INFO:Set up data.
2023-08-11 01:17:13,631:INFO:Set up index.
2023-08-11 01:17:38,510:INFO:Initializing predict_model()
2023-08-11 01:17:38,510:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED90970>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AED790D0>)
2023-08-11 01:17:38,510:INFO:Checking exceptions
2023-08-11 01:17:38,510:INFO:Preloading libraries
2023-08-11 01:17:38,510:INFO:Set up data.
2023-08-11 01:17:38,515:INFO:Set up index.
2023-08-11 01:18:29,379:INFO:Initializing predict_model()
2023-08-11 01:18:29,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEDA6D60>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEC25C10>)
2023-08-11 01:18:29,380:INFO:Checking exceptions
2023-08-11 01:18:29,380:INFO:Preloading libraries
2023-08-11 01:18:29,380:INFO:Set up data.
2023-08-11 01:18:29,384:INFO:Set up index.
2023-08-11 01:19:20,520:INFO:Initializing predict_model()
2023-08-11 01:19:20,520:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEDC81C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEDD2280>)
2023-08-11 01:19:20,520:INFO:Checking exceptions
2023-08-11 01:19:20,520:INFO:Preloading libraries
2023-08-11 01:19:20,520:INFO:Set up data.
2023-08-11 01:19:20,536:INFO:Set up index.
2023-08-11 01:19:54,693:INFO:Initializing predict_model()
2023-08-11 01:19:54,693:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEDB96A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DBF430>)
2023-08-11 01:19:54,693:INFO:Checking exceptions
2023-08-11 01:19:54,693:INFO:Preloading libraries
2023-08-11 01:19:54,693:INFO:Set up data.
2023-08-11 01:19:54,693:INFO:Set up index.
2023-08-11 01:21:05,445:INFO:Initializing predict_model()
2023-08-11 01:21:05,446:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED40310>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEDF54C0>)
2023-08-11 01:21:05,446:INFO:Checking exceptions
2023-08-11 01:21:05,446:INFO:Preloading libraries
2023-08-11 01:21:05,446:INFO:Set up data.
2023-08-11 01:21:05,451:INFO:Set up index.
2023-08-11 01:21:13,720:INFO:Initializing predict_model()
2023-08-11 01:21:13,721:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEDF1C70>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEDF53A0>)
2023-08-11 01:21:13,721:INFO:Checking exceptions
2023-08-11 01:21:13,721:INFO:Preloading libraries
2023-08-11 01:21:13,722:INFO:Set up data.
2023-08-11 01:21:13,729:INFO:Set up index.
2023-08-11 01:21:39,548:INFO:Initializing predict_model()
2023-08-11 01:21:39,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED2F5E0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEE17670>)
2023-08-11 01:21:39,549:INFO:Checking exceptions
2023-08-11 01:21:39,550:INFO:Preloading libraries
2023-08-11 01:21:39,550:INFO:Set up data.
2023-08-11 01:21:39,555:INFO:Set up index.
2023-08-11 01:30:31,567:INFO:Initializing predict_model()
2023-08-11 01:30:31,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEE267F0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DBF700>)
2023-08-11 01:30:31,567:INFO:Checking exceptions
2023-08-11 01:30:31,568:INFO:Preloading libraries
2023-08-11 01:30:31,568:INFO:Set up data.
2023-08-11 01:30:31,573:INFO:Set up index.
2023-08-11 01:32:22,661:INFO:Initializing predict_model()
2023-08-11 01:32:22,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AF0CAC40>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DBF9D0>)
2023-08-11 01:32:22,661:INFO:Checking exceptions
2023-08-11 01:32:22,662:INFO:Preloading libraries
2023-08-11 01:32:22,663:INFO:Set up data.
2023-08-11 01:32:22,668:INFO:Set up index.
2023-08-11 01:33:54,347:INFO:Initializing predict_model()
2023-08-11 01:33:54,348:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AED3EF70>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AE912790>)
2023-08-11 01:33:54,348:INFO:Checking exceptions
2023-08-11 01:33:54,348:INFO:Preloading libraries
2023-08-11 01:33:54,349:INFO:Set up data.
2023-08-11 01:33:54,353:INFO:Set up index.
2023-08-11 01:33:58,885:INFO:Initializing predict_model()
2023-08-11 01:33:58,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B011DE50>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AF0C19D0>)
2023-08-11 01:33:58,886:INFO:Checking exceptions
2023-08-11 01:33:58,886:INFO:Preloading libraries
2023-08-11 01:33:58,887:INFO:Set up data.
2023-08-11 01:33:58,891:INFO:Set up index.
2023-08-11 01:35:37,907:INFO:Initializing predict_model()
2023-08-11 01:35:37,908:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292AEE26910>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292A970CC10>)
2023-08-11 01:35:37,908:INFO:Checking exceptions
2023-08-11 01:35:37,908:INFO:Preloading libraries
2023-08-11 01:35:37,909:INFO:Set up data.
2023-08-11 01:35:37,910:INFO:Set up index.
2023-08-11 01:35:59,386:INFO:Initializing predict_model()
2023-08-11 01:35:59,387:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0182B80>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AF0C41F0>)
2023-08-11 01:35:59,387:INFO:Checking exceptions
2023-08-11 01:35:59,387:INFO:Preloading libraries
2023-08-11 01:35:59,388:INFO:Set up data.
2023-08-11 01:35:59,394:INFO:Set up index.
2023-08-11 01:37:17,662:INFO:Initializing predict_model()
2023-08-11 01:37:17,663:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B013C940>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DB0310>)
2023-08-11 01:37:17,663:INFO:Checking exceptions
2023-08-11 01:37:17,663:INFO:Preloading libraries
2023-08-11 01:37:17,663:INFO:Set up data.
2023-08-11 01:37:17,668:INFO:Set up index.
2023-08-11 01:40:15,522:INFO:Initializing predict_model()
2023-08-11 01:40:15,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B02DA7C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DD9D0>)
2023-08-11 01:40:15,522:INFO:Checking exceptions
2023-08-11 01:40:15,523:INFO:Preloading libraries
2023-08-11 01:40:15,523:INFO:Set up data.
2023-08-11 01:40:15,527:INFO:Set up index.
2023-08-11 01:40:43,401:INFO:Initializing predict_model()
2023-08-11 01:40:43,401:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B022EE50>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AF0C4790>)
2023-08-11 01:40:43,401:INFO:Checking exceptions
2023-08-11 01:40:43,402:INFO:Preloading libraries
2023-08-11 01:40:43,402:INFO:Set up data.
2023-08-11 01:40:43,406:INFO:Set up index.
2023-08-11 01:43:18,772:INFO:Initializing predict_model()
2023-08-11 01:43:18,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B02722B0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DDEE0>)
2023-08-11 01:43:18,773:INFO:Checking exceptions
2023-08-11 01:43:18,773:INFO:Preloading libraries
2023-08-11 01:43:18,773:INFO:Set up data.
2023-08-11 01:43:18,777:INFO:Set up index.
2023-08-11 01:43:52,112:INFO:Initializing predict_model()
2023-08-11 01:43:52,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0185EB0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AE912D30>)
2023-08-11 01:43:52,113:INFO:Checking exceptions
2023-08-11 01:43:52,113:INFO:Preloading libraries
2023-08-11 01:43:52,114:INFO:Set up data.
2023-08-11 01:43:52,120:INFO:Set up index.
2023-08-11 01:44:40,096:INFO:Initializing predict_model()
2023-08-11 01:44:40,096:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0296F10>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DD430>)
2023-08-11 01:44:40,096:INFO:Checking exceptions
2023-08-11 01:44:40,096:INFO:Preloading libraries
2023-08-11 01:44:40,097:INFO:Set up data.
2023-08-11 01:44:40,106:INFO:Set up index.
2023-08-11 01:44:53,797:INFO:Initializing predict_model()
2023-08-11 01:44:53,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B02DA400>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AF0C4F70>)
2023-08-11 01:44:53,797:INFO:Checking exceptions
2023-08-11 01:44:53,797:INFO:Preloading libraries
2023-08-11 01:44:53,797:INFO:Set up data.
2023-08-11 01:44:53,806:INFO:Set up index.
2023-08-11 01:45:02,606:INFO:Initializing predict_model()
2023-08-11 01:45:02,606:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0296A00>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DD790>)
2023-08-11 01:45:02,606:INFO:Checking exceptions
2023-08-11 01:45:02,606:INFO:Preloading libraries
2023-08-11 01:45:02,607:INFO:Set up data.
2023-08-11 01:45:02,614:INFO:Set up index.
2023-08-11 01:46:53,393:INFO:Initializing predict_model()
2023-08-11 01:46:53,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B031D7F0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B032F940>)
2023-08-11 01:46:53,393:INFO:Checking exceptions
2023-08-11 01:46:53,393:INFO:Preloading libraries
2023-08-11 01:46:53,393:INFO:Set up data.
2023-08-11 01:46:53,393:INFO:Set up index.
2023-08-11 01:47:01,710:INFO:Initializing predict_model()
2023-08-11 01:47:01,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0326940>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B032F700>)
2023-08-11 01:47:01,710:INFO:Checking exceptions
2023-08-11 01:47:01,710:INFO:Preloading libraries
2023-08-11 01:47:01,710:INFO:Set up data.
2023-08-11 01:47:01,710:INFO:Set up index.
2023-08-11 01:49:45,136:INFO:Initializing predict_model()
2023-08-11 01:49:45,136:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0346910>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029292DBFAF0>)
2023-08-11 01:49:45,136:INFO:Checking exceptions
2023-08-11 01:49:45,137:INFO:Preloading libraries
2023-08-11 01:49:45,137:INFO:Set up data.
2023-08-11 01:49:45,141:INFO:Set up index.
2023-08-11 01:50:16,307:INFO:Initializing predict_model()
2023-08-11 01:50:16,307:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0369FD0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AF0C4700>)
2023-08-11 01:50:16,307:INFO:Checking exceptions
2023-08-11 01:50:16,307:INFO:Preloading libraries
2023-08-11 01:50:16,308:INFO:Set up data.
2023-08-11 01:50:16,312:INFO:Set up index.
2023-08-11 01:50:36,355:INFO:Initializing predict_model()
2023-08-11 01:50:36,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B033CC10>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DD820>)
2023-08-11 01:50:36,355:INFO:Checking exceptions
2023-08-11 01:50:36,355:INFO:Preloading libraries
2023-08-11 01:50:36,355:INFO:Set up data.
2023-08-11 01:50:36,355:INFO:Set up index.
2023-08-11 01:51:35,070:INFO:Initializing predict_model()
2023-08-11 01:51:35,070:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B03B4550>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEC25EE0>)
2023-08-11 01:51:35,070:INFO:Checking exceptions
2023-08-11 01:51:35,070:INFO:Preloading libraries
2023-08-11 01:51:35,070:INFO:Set up data.
2023-08-11 01:51:35,070:INFO:Set up index.
2023-08-11 01:56:02,850:INFO:Initializing predict_model()
2023-08-11 01:56:02,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B03D67C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DD9D0>)
2023-08-11 01:56:02,850:INFO:Checking exceptions
2023-08-11 01:56:02,850:INFO:Preloading libraries
2023-08-11 01:56:02,850:INFO:Set up data.
2023-08-11 01:56:02,850:INFO:Set up index.
2023-08-11 01:57:54,948:INFO:Initializing predict_model()
2023-08-11 01:57:54,948:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B03F1280>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C0160>)
2023-08-11 01:57:54,948:INFO:Checking exceptions
2023-08-11 01:57:54,948:INFO:Preloading libraries
2023-08-11 01:57:54,948:INFO:Set up data.
2023-08-11 01:57:54,948:INFO:Set up index.
2023-08-11 01:58:46,832:INFO:Initializing predict_model()
2023-08-11 01:58:46,832:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B051F3A0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C0940>)
2023-08-11 01:58:46,832:INFO:Checking exceptions
2023-08-11 01:58:46,832:INFO:Preloading libraries
2023-08-11 01:58:46,832:INFO:Set up data.
2023-08-11 01:58:46,832:INFO:Set up index.
2023-08-11 01:58:50,233:INFO:Initializing predict_model()
2023-08-11 01:58:50,233:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B03F16D0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C0CA0>)
2023-08-11 01:58:50,233:INFO:Checking exceptions
2023-08-11 01:58:50,233:INFO:Preloading libraries
2023-08-11 01:58:50,233:INFO:Set up data.
2023-08-11 01:58:50,233:INFO:Set up index.
2023-08-11 01:59:18,772:INFO:Initializing predict_model()
2023-08-11 01:59:18,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B05B0250>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03CD940>)
2023-08-11 01:59:18,772:INFO:Checking exceptions
2023-08-11 01:59:18,772:INFO:Preloading libraries
2023-08-11 01:59:18,772:INFO:Set up data.
2023-08-11 01:59:18,772:INFO:Set up index.
2023-08-11 01:59:52,362:INFO:Initializing predict_model()
2023-08-11 01:59:52,362:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B05D57C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B04E7E50>)
2023-08-11 01:59:52,362:INFO:Checking exceptions
2023-08-11 01:59:52,362:INFO:Preloading libraries
2023-08-11 01:59:52,362:INFO:Set up data.
2023-08-11 01:59:52,362:INFO:Set up index.
2023-08-11 02:01:13,143:INFO:Initializing predict_model()
2023-08-11 02:01:13,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B05EC280>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C0F70>)
2023-08-11 02:01:13,143:INFO:Checking exceptions
2023-08-11 02:01:13,143:INFO:Preloading libraries
2023-08-11 02:01:13,143:INFO:Set up data.
2023-08-11 02:01:13,143:INFO:Set up index.
2023-08-11 02:02:34,813:INFO:Initializing predict_model()
2023-08-11 02:02:34,813:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0608940>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C0550>)
2023-08-11 02:02:34,814:INFO:Checking exceptions
2023-08-11 02:02:34,814:INFO:Preloading libraries
2023-08-11 02:02:34,815:INFO:Set up data.
2023-08-11 02:02:34,818:INFO:Set up index.
2023-08-11 02:02:40,829:INFO:Initializing predict_model()
2023-08-11 02:02:40,829:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0608940>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B02DDC10>)
2023-08-11 02:02:40,829:INFO:Checking exceptions
2023-08-11 02:02:40,829:INFO:Preloading libraries
2023-08-11 02:02:40,830:INFO:Set up data.
2023-08-11 02:02:40,836:INFO:Set up index.
2023-08-11 02:02:45,445:INFO:Initializing predict_model()
2023-08-11 02:02:45,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B035A2E0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292B03C09D0>)
2023-08-11 02:02:45,446:INFO:Checking exceptions
2023-08-11 02:02:45,446:INFO:Preloading libraries
2023-08-11 02:02:45,446:INFO:Set up data.
2023-08-11 02:02:45,450:INFO:Set up index.
2023-08-11 02:03:02,572:INFO:Initializing predict_model()
2023-08-11 02:03:02,572:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000292B0617550>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['MinTimeToNearestStation', 'Area',
                                             'Frontage', 'BuildingYear',
                                             'CityPlanning', 'Year',
                                             'Population', 'GDP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=SimpleImputer(strategy='most_frequent...
                ('rest_encoding',
                 TransformerWrapper(include=['Prefecture'],
                                    transformer=TargetEncoder(cols=['Prefecture'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 LGBMRegressor(bagging_fraction=0.7, bagging_freq=4,
                               feature_fraction=0.8, learning_rate=0.15,
                               min_child_samples=96, min_split_gain=0.2,
                               n_estimators=240, num_leaves=30,
                               random_state=4516, reg_alpha=0.7,
                               reg_lambda=5))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000292AEC25D30>)
2023-08-11 02:03:02,572:INFO:Checking exceptions
2023-08-11 02:03:02,572:INFO:Preloading libraries
2023-08-11 02:03:02,572:INFO:Set up data.
2023-08-11 02:03:02,588:INFO:Set up index.
